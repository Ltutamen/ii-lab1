package ua.axiom.labs.lab1.controller.task;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import ua.axiom.labs.lab1.configuration.VariantFunction;import ua.axiom.labs.lab1.model.Chromosome;import ua.axiom.labs.lab1.model.Population;import java.util.DoubleSummaryStatistics;import java.util.Set;@Componentpublic class SolutionAppraiserService {    private final VariantFunction variantFunction;    @Autowired    public SolutionAppraiserService(VariantFunction variantFunction) {        this.variantFunction = variantFunction;    }    public double rateSolution(Chromosome solution) {        return variantFunction.apply(solution.getGenes());    }    public double rateSolution(Double[] solution) {        return variantFunction.apply(solution);    }    /**     * Gives double pivot, such so @percent part of pipulation is better     * @param percent     * @return     */    public double getPivotFor(double percent, Set<Population> populations) {        if(percent> 1. || percent < 0.) {            throw new IllegalArgumentException();        }        DoubleSummaryStatistics statistics = populations.stream()                .map(Population::getChromosome)                .mapToDouble(this::rateSolution)                .summaryStatistics();        return statistics.getMin() + ((statistics.getMax() - statistics.getMin()) * percent);    }}